tools:
  execute_command_async:
    enabled: false
    name: execute_command_async
    description: |
      Start a command execution asynchronously and return a token for tracking.
      Use the token to query the status (tool/query_command_status) of the command execution every 30 seconds.
    inputSchema:
      type: object
      properties:
        command:
          type: string
          description: The command to execute
        timeout:
          type: number
          description: Optional timeout in seconds
      required:
        - command

  query_command_status:
    enabled: false
    name: query_command_status
    description: Query the status of an asynchronous command execution or wait for it to complete
    inputSchema:
      type: object
      properties:
        token:
          type: string
          description: The token returned by execute_command_async
        wait:
          type: boolean
          description: Whether to wait for the command to complete
          default: false
        timeout:
          type: number
          description: Optional timeout in seconds for waiting
      required:
        - token

  execute_task:
    enabled: true
    name: execute_task
    description: |
      Execute a predefined task by name and start it asynchronously.
      Use the token returned by this tool to query the status (tool/query_task_status) of the task execution every 30 seconds.
    inputSchema:
      type: object
      properties:
        task_name:
          type: string
          description: Name of the task to execute
      required:
        - task_name

  query_task_status:
    enabled: true
    name: query_task_status
    description: Query the status of an asynchronously executed task
    inputSchema:
      type: object
      properties:
        token:
          type: string
          description: The token returned by execute_task
      required:
        - token

  list_tasks:
    enabled: true
    name: list_tasks
    description: List all available predefined tasks
    inputSchema:
      type: object
      properties: {}
      required: []

  list_instructions:
    enabled: true
    name: list_instructions
    description: List all available instructions
    inputSchema:
      type: object
      properties: {}
      required: []

  get_instruction:
    enabled: true
    name: get_instruction
    description: Get a specific instruction with its details
    inputSchema:
      type: object
      properties:
        name:
          type: string
          description: Name of the instruction to retrieve
      required:
        - name

  query_script_status:
    enabled: true
    name: query_script_status
    description: Query the status of an asynchronously executed script
    inputSchema:
      type: object
      properties:
        token:
          type: string
          description: The token returned by async script execution
        timeout:
          type: number
          description: Optional timeout in seconds for waiting
      required:
        - token

  # Script-based tools examples
  deploy:
    enabled: true
    name: deploy
    description: |
      Deploy the application asynchronously and return a token for tracking.
      Use the token to query the status (tool/query_script_status).
      This tool includes concurrency control to prevent conflicting deployments.
    type: script
    # Default script path (optional, used as fallback if no OS-specific script is found)
    script: bash {pwd}/../mcp_tools/tests/fixtures/scripts/test_deploy.sh
    # OS-specific scripts
    scripts:
      windows: powershell -file {pwd}/../mcp_tools/tests/fixtures/scripts/test_deploy.ps1
      darwin: bash {pwd}/../mcp_tools/tests/fixtures/scripts/test_deploy.sh
      linux: bash {pwd}/../mcp_tools/tests/fixtures/scripts/test_deploy.sh
    # Concurrency configuration to prevent conflicting deployments
    concurrency:
      max_concurrent: 1          # Only allow one deployment at a time
    # Post-processing configuration to control output attachment and security
    post_processing:
      attach_stdout: true              # Include stdout in output (default: true)
      attach_stderr: false             # Include stderr in output (default: true)
      stderr_on_failure_only: true    # Only include stderr if return_code != 0 (default: false)
      security_filtering:
        enabled: true                  # Enable security filtering for sensitive data
        apply_to: ["stdout", "stderr"] # Filter both stdout and stderr (default: both)
        log_findings: true             # Log security alerts (default: true)
    inputSchema:
      type: object
      properties:
        environment:
          type: string
          description: Deployment environment
          enum: ["dev", "staging", "prod"]
        version:
          type: string
          description: Version to deploy
          default: "1.0.0"
        force:
          type: boolean
          description: Force deployment even if version exists
          default: false
        timeout:
          type: number
          description: Optional timeout in seconds
      required:
        - environment

  # Example: Health check tool (no stderr noise)
  health_check:
    enabled: true
    name: health_check
    description: |
      Check application health status without verbose curl output.
      Use the token to query the status (tool/query_script_status).
    type: script
    scripts:
      windows: powershell -command "Invoke-WebRequest -Uri http://localhost:8080/health -UseBasicParsing"
      darwin: curl -s http://localhost:8080/health
      linux: curl -s http://localhost:8080/health
    post_processing:
      attach_stdout: true
      attach_stderr: false  # Ignore curl's verbose output
    inputSchema:
      type: object
      properties:
        timeout:
          type: number
          description: Optional timeout in seconds
      required: []

  # Example: Validation tool (errors only)
  validate_config:
    enabled: true
    name: validate_config
    description: |
      Validate configuration files and show only validation errors.
      Use the token to query the status (tool/query_script_status).
    type: script
    scripts:
      windows: powershell -file {pwd}/../mcp_tools/tests/fixtures/scripts/validate_config.ps1
      darwin: bash {pwd}/../mcp_tools/tests/fixtures/scripts/validate_config.sh
      linux: bash {pwd}/../mcp_tools/tests/fixtures/scripts/validate_config.sh
    post_processing:
      attach_stdout: false   # Only show validation errors
      attach_stderr: true
    inputSchema:
      type: object
      properties:
        config_file:
          type: string
          description: Path to configuration file to validate
          default: "config.yaml"
        timeout:
          type: number
          description: Optional timeout in seconds
      required: []

# Predefined tasks with associated command lines
tasks:
  # System information tasks
  system_info:
    description: Get system information
    commands:
      windows: systeminfo
      linux: uname -a && lsb_release -a
      darwin: system_profiler SPSoftwareDataType SPHardwareDataType
    timeout: 30

  # Generic long-running tasks
  ping_test:
    description: Ping a host 10 times
    commands:
      windows: ping -n 10 google.com
      linux: ping -c 10 google.com
      darwin: ping -c 10 google.com

  # private_tool:
  #   description: A private tool
  #   commands:
  #     windows: powershell -file {private_tool_root}/test_private_tool.ps1
  #     linux: bash {private_tool_root}/test_private_tool.sh
  #     darwin: bash {private_tool_root}/test_private_tool.sh
