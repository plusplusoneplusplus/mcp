name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    if: ${{ github.actor != 'github-actions[bot]' }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        component: [
          "core-group",      # config, mcp_core, mcp_tools
          "server-group",    # server, project tests
          "utils-group-1",   # html_to_markdown, vector_store, secret_scanner
          "utils-group-2",   # ocr_extractor, playwright, graph_interface
          "plugins-group-1", # azrepo, kusto
          "plugins-group-2"  # git_tool, knowledge_indexer
        ]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # - name: Install Chrome
      #   run: |
      #     wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
      #     echo "deb http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
      #     sudo apt-get update
      #     sudo apt-get install -y google-chrome-stable

      # - name: Install ChromeDriver
      #   run: |
      #     CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d. -f1)
      #     CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION")
      #     wget -q "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
      #     unzip chromedriver_linux64.zip
      #     sudo mv chromedriver /usr/local/bin/
      #     sudo chmod +x /usr/local/bin/chromedriver

      - name: Install uv (Unix)
        if: runner.os != 'Windows'
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install uv (Windows)
        if: runner.os == 'Windows'
        run: |
          irm https://astral.sh/uv/install.ps1 | iex
          echo "$env:USERPROFILE\.cargo\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies (Unix)
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          uv pip install pytest pytest-asyncio pytest-xdist
          uv pip install -e .

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          .venv\Scripts\activate
          uv pip install pytest pytest-asyncio pytest-xdist
          uv pip install -e .

      - name: Install Playwright and Browsers (Unix)
        if: runner.os != 'Windows' && (matrix.component == 'utils-group-2' || matrix.component == 'server-group' || matrix.component == 'core-group')
        run: |
          source .venv/bin/activate
          # Install playwright if not already installed via dependencies
          uv pip install playwright || true
          # Install browsers with retry logic
          for i in {1..3}; do
            if playwright install chromium; then
              echo "Playwright browsers installed successfully"
              # Verify installation
              python -c "from playwright.sync_api import sync_playwright; p = sync_playwright().start(); p.chromium.launch(headless=True).close(); p.stop(); print('Browser verification successful')" || echo "Browser verification failed, tests may be skipped"
              break
            else
              echo "Attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi
            if [ $i -eq 3 ]; then
              echo "Failed to install Playwright browsers after 3 attempts"
              echo "Tests requiring Playwright will be skipped"
            fi
          done

      - name: Install Playwright and Browsers (Windows)
        if: runner.os == 'Windows' && (matrix.component == 'utils-group-2' || matrix.component == 'server-group' || matrix.component == 'core-group')
        shell: powershell
        run: |
          .venv\Scripts\activate
          # Install playwright if not already installed via dependencies
          uv pip install playwright
          # Install browsers with retry logic
          for ($i = 1; $i -le 3; $i++) {
            try {
              playwright install chromium
              Write-Host "Playwright browsers installed successfully"
              # Verify installation
              python -c "from playwright.sync_api import sync_playwright; p = sync_playwright().start(); p.chromium.launch(headless=True).close(); p.stop(); print('Browser verification successful')"
              if ($LASTEXITCODE -ne 0) { Write-Host "Browser verification failed, tests may be skipped" }
              break
            } catch {
              Write-Host "Attempt $i failed, retrying in 10 seconds..."
              Start-Sleep -Seconds 10
            }
            if ($i -eq 3) {
              Write-Host "Failed to install Playwright browsers after 3 attempts"
              Write-Host "Tests requiring Playwright will be skipped"
            }
          }

      - name: Run Core Group Tests (Unix)
        if: runner.os != 'Windows' && matrix.component == 'core-group'
        env:
          PLAYWRIGHT_BROWSERS_PATH: ${{ runner.temp }}/pw-browsers
        run: |
          source .venv/bin/activate
          chmod +x ./scripts/run_component_group.sh
          ./scripts/run_component_group.sh core-group

      - name: Run Core Group Tests (Windows)
        if: runner.os == 'Windows' && matrix.component == 'core-group'
        shell: bash
        env:
          PLAYWRIGHT_BROWSERS_PATH: ${{ runner.temp }}/pw-browsers
        run: |
          source .venv/Scripts/activate
          chmod +x ./scripts/run_component_group.sh
          ./scripts/run_component_group.sh core-group

      - name: Run Server Group Tests (Unix)
        if: runner.os != 'Windows' && matrix.component == 'server-group'
        env:
          PLAYWRIGHT_BROWSERS_PATH: ${{ runner.temp }}/pw-browsers
        run: |
          source .venv/bin/activate
          chmod +x ./scripts/run_component_group.sh
          ./scripts/run_component_group.sh server-group

      - name: Run Server Group Tests (Windows)
        if: runner.os == 'Windows' && matrix.component == 'server-group'
        shell: bash
        env:
          PLAYWRIGHT_BROWSERS_PATH: ${{ runner.temp }}/pw-browsers
        run: |
          source .venv/Scripts/activate
          chmod +x ./scripts/run_component_group.sh
          ./scripts/run_component_group.sh server-group

      - name: Run Utils Group 1 Tests (Unix)
        if: runner.os != 'Windows' && matrix.component == 'utils-group-1'
        env:
          PLAYWRIGHT_BROWSERS_PATH: ${{ runner.temp }}/pw-browsers
        run: |
          source .venv/bin/activate
          chmod +x ./scripts/run_component_group.sh
          ./scripts/run_component_group.sh utils-group-1

      - name: Run Utils Group 1 Tests (Windows)
        if: runner.os == 'Windows' && matrix.component == 'utils-group-1'
        shell: bash
        env:
          PLAYWRIGHT_BROWSERS_PATH: ${{ runner.temp }}/pw-browsers
        run: |
          source .venv/Scripts/activate
          chmod +x ./scripts/run_component_group.sh
          ./scripts/run_component_group.sh utils-group-1

      - name: Run Utils Group 2 Tests (Unix)
        if: runner.os != 'Windows' && matrix.component == 'utils-group-2'
        env:
          PLAYWRIGHT_BROWSERS_PATH: ${{ runner.temp }}/pw-browsers
        run: |
          source .venv/bin/activate
          chmod +x ./scripts/run_component_group.sh
          ./scripts/run_component_group.sh utils-group-2

      - name: Run Utils Group 2 Tests (Windows)
        if: runner.os == 'Windows' && matrix.component == 'utils-group-2'
        shell: bash
        env:
          PLAYWRIGHT_BROWSERS_PATH: ${{ runner.temp }}/pw-browsers
        run: |
          source .venv/Scripts/activate
          chmod +x ./scripts/run_component_group.sh
          ./scripts/run_component_group.sh utils-group-2

      - name: Run Plugins Group 1 Tests (Unix)
        if: runner.os != 'Windows' && matrix.component == 'plugins-group-1'
        env:
          PLAYWRIGHT_BROWSERS_PATH: ${{ runner.temp }}/pw-browsers
        run: |
          source .venv/bin/activate
          chmod +x ./scripts/run_component_group.sh
          ./scripts/run_component_group.sh plugins-group-1

      - name: Run Plugins Group 1 Tests (Windows)
        if: runner.os == 'Windows' && matrix.component == 'plugins-group-1'
        shell: bash
        env:
          PLAYWRIGHT_BROWSERS_PATH: ${{ runner.temp }}/pw-browsers
        run: |
          source .venv/Scripts/activate
          chmod +x ./scripts/run_component_group.sh
          ./scripts/run_component_group.sh plugins-group-1

      - name: Run Plugins Group 2 Tests (Unix)
        if: runner.os != 'Windows' && matrix.component == 'plugins-group-2'
        env:
          PLAYWRIGHT_BROWSERS_PATH: ${{ runner.temp }}/pw-browsers
        run: |
          source .venv/bin/activate
          chmod +x ./scripts/run_component_group.sh
          ./scripts/run_component_group.sh plugins-group-2

      - name: Run Plugins Group 2 Tests (Windows)
        if: runner.os == 'Windows' && matrix.component == 'plugins-group-2'
        shell: bash
        env:
          PLAYWRIGHT_BROWSERS_PATH: ${{ runner.temp }}/pw-browsers
        run: |
          source .venv/Scripts/activate
          chmod +x ./scripts/run_component_group.sh
          ./scripts/run_component_group.sh plugins-group-2

      - name: Cleanup Temporary Files (Unix)
        if: always() && runner.os != 'Windows'
        run: |
          # Clean up any remaining temporary test files
          find /tmp -name "*test_chroma*" -type d -exec rm -rf {} + 2>/dev/null || true
          find /tmp -name "*pytest*" -type d -exec rm -rf {} + 2>/dev/null || true

      - name: Cleanup Temporary Files (Windows)
        if: always() && runner.os == 'Windows'
        shell: powershell
        run: |
          # Clean up any remaining temporary test files
          Get-ChildItem -Path $env:TEMP -Filter "*test_chroma*" -Directory -ErrorAction SilentlyContinue | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
          Get-ChildItem -Path $env:TEMP -Filter "*pytest*" -Directory -ErrorAction SilentlyContinue | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
