name: Neo4j Integration Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'utils/graph_interface/**'
      - 'docker/neo4j/**'
      - '.github/workflows/neo4j-tests.yml'
      - 'pyproject.toml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'utils/graph_interface/**'
      - 'docker/neo4j/**'
      - '.github/workflows/neo4j-tests.yml'
      - 'pyproject.toml'

env:
  NEO4J_URI: bolt://localhost:7687
  NEO4J_USERNAME: neo4j
  NEO4J_PASSWORD: test
  NEO4J_DATABASE: neo4j
  PYTHONPATH: ${{ github.workspace }}

jobs:
  neo4j-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        neo4j-version: ['5.15', '5.14', '5.13']

    services:
      neo4j:
        image: neo4j:${{ matrix.neo4j-version }}-community
        env:
          NEO4J_AUTH: neo4j/test
          NEO4J_PLUGINS: '["apoc"]'
          NEO4J_dbms_security_procedures_unrestricted: apoc.*
          NEO4J_dbms_security_procedures_allowlist: apoc.*
          NEO4J_dbms_memory_heap_initial_size: 256m
          NEO4J_dbms_memory_heap_max_size: 512m
          NEO4J_dbms_memory_pagecache_size: 256m
        ports:
          - 7687:7687
          - 7474:7474
        options: >-
          --health-cmd "cypher-shell -u neo4j -p test 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 30s

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Wait for Neo4j to be ready
      run: |
        echo "Waiting for Neo4j to be ready..."
        timeout 60s bash -c 'until cypher-shell -u neo4j -p test "RETURN 1" 2>/dev/null; do sleep 2; done'
        echo "Neo4j is ready!"

    - name: Initialize Neo4j database
      run: |
        echo "Creating indexes and constraints..."
        cypher-shell -u neo4j -p test < docker/neo4j/init-scripts/01-create-indexes.cypher
        echo "Database initialized successfully"

    - name: Run Neo4j connection tests
      run: |
        uv run pytest utils/graph_interface/tests/test_neo4j_client.py -v --tb=short

    - name: Run graph interface unit tests
      run: |
        uv run pytest utils/graph_interface/tests/ -v --tb=short --cov=utils.graph_interface --cov-report=xml

    - name: Run integration tests
      run: |
        uv run pytest utils/graph_interface/tests/ -v --tb=short -m "integration"

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: neo4j-tests
        name: neo4j-tests-${{ matrix.python-version }}-${{ matrix.neo4j-version }}

    - name: Performance regression tests
      run: |
        uv run pytest utils/graph_interface/tests/ -v --tb=short -m "performance" --benchmark-only

  neo4j-docker-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Test Docker Compose setup
      run: |
        echo "Testing Docker Compose configuration..."
        docker-compose -f docker/neo4j/docker-compose.yml config

    - name: Start Neo4j services
      run: |
        echo "Starting Neo4j development and test services..."
        docker-compose -f docker/neo4j/docker-compose.yml up -d

        echo "Waiting for services to be ready..."
        timeout 120s bash -c 'until docker exec mcp-neo4j-dev cypher-shell -u neo4j -p development "RETURN 1" 2>/dev/null; do sleep 5; done'
        timeout 120s bash -c 'until docker exec mcp-neo4j-test cypher-shell -u neo4j -p test "RETURN 1" 2>/dev/null; do sleep 5; done'

    - name: Test database initialization
      run: |
        echo "Testing database initialization scripts..."
        docker exec -i mcp-neo4j-dev cypher-shell -u neo4j -p development < docker/neo4j/init-scripts/01-create-indexes.cypher
        docker exec -i mcp-neo4j-dev cypher-shell -u neo4j -p development < docker/neo4j/init-scripts/02-sample-data.cypher

        # Verify sample data was loaded
        node_count=$(docker exec mcp-neo4j-dev cypher-shell -u neo4j -p development "MATCH (n) RETURN count(n) as count" --format plain | tail -n 1 | tr -d '"')
        echo "Node count: $node_count"
        if [ "$node_count" -lt 10 ]; then
          echo "Error: Expected at least 10 nodes, got $node_count"
          exit 1
        fi

    - name: Test backup and restore functionality
      run: |
        echo "Testing backup functionality..."
        docker exec mcp-neo4j-dev neo4j-admin database dump neo4j --to-path=/tmp/
        docker cp mcp-neo4j-dev:/tmp/neo4j.dump ./test-backup.dump

        if [ ! -f "./test-backup.dump" ]; then
          echo "Error: Backup file was not created"
          exit 1
        fi

        echo "Backup test successful"

    - name: Check service health
      run: |
        echo "Checking service health..."
        docker-compose -f docker/neo4j/docker-compose.yml ps

        # Check if both services are healthy
        dev_health=$(docker inspect mcp-neo4j-dev --format='{{.State.Health.Status}}')
        test_health=$(docker inspect mcp-neo4j-test --format='{{.State.Health.Status}}')

        echo "Development DB health: $dev_health"
        echo "Test DB health: $test_health"

        if [ "$dev_health" != "healthy" ] || [ "$test_health" != "healthy" ]; then
          echo "Error: One or more services are not healthy"
          docker-compose -f docker/neo4j/docker-compose.yml logs
          exit 1
        fi

    - name: Cleanup
      if: always()
      run: |
        docker-compose -f docker/neo4j/docker-compose.yml down -v
        docker system prune -f

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner on Docker images
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'neo4j:5.15-community'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  documentation-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check documentation files exist
      run: |
        echo "Checking required documentation files..."

        required_files=(
          "docs/development/neo4j-setup.md"
          "docker/neo4j/docker-compose.yml"
          "docker/neo4j/init-scripts/01-create-indexes.cypher"
          "docker/neo4j/init-scripts/02-sample-data.cypher"
          "scripts/neo4j-dev-setup.sh"
          "scripts/neo4j-reset.sh"
          "scripts/neo4j-backup.sh"
        )

        missing_files=()
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          fi
        done

        if [ ${#missing_files[@]} -ne 0 ]; then
          echo "Error: Missing required files:"
          printf '%s\n' "${missing_files[@]}"
          exit 1
        fi

        echo "All required documentation files are present"

    - name: Validate Cypher scripts syntax
      run: |
        echo "Validating Cypher script syntax..."

        # Start a temporary Neo4j instance for syntax validation
        docker run -d --name temp-neo4j -e NEO4J_AUTH=neo4j/test neo4j:5.15-community

        # Wait for it to be ready
        timeout 60s bash -c 'until docker exec temp-neo4j cypher-shell -u neo4j -p test "RETURN 1" 2>/dev/null; do sleep 2; done'

        # Test syntax of initialization scripts
        docker exec -i temp-neo4j cypher-shell -u neo4j -p test < docker/neo4j/init-scripts/01-create-indexes.cypher

        # Cleanup
        docker stop temp-neo4j
        docker rm temp-neo4j

        echo "Cypher script syntax validation successful"
